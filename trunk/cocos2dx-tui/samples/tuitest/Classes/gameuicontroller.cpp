#include <gameuicontroller.h>
#include <gameuievent.h>
#include <macro.h>
#include <tui.h>

GameUIController* GameUIController::s_instance = NULL;
GameUIController* GameUIController::I()
{
	if( NULL == s_instance ){
		s_instance = new GameUIController();
		if (s_instance && s_instance->init()){   
			s_instance->autorelease();
		}else{   
			CC_SAFE_DELETE(s_instance);
			return NULL;
		}   
	}
	return s_instance;
}

GameUIController::GameUIController()
{
	/** register event callback, tui_event_cb_table defined in gameuievent.h,
	   	gameuievent.h is generated by flash cs TGameUITool extension.
	 */
	int ncb = sizeof(tui_event_cb_table)/sizeof(tui_event_cb_table[0]);
	TuiEventCallBackTable* ecb = NULL;
	for( int i=0; i<ncb; ++i ){
		ecb = tui_event_cb_table+i;
		registerEventCallBack( ecb->event, ecb->callback );
		tLogDebug( "register event: %s", ecb->event );
	}
}

GameUIController::~GameUIController()
{
}

void GameUIController::on_event_panel_level_click_back( void* o, TEvent* e )
{
//	tLogDebug( "--> on event click" );
	closeAll(); //close and remove all
	Tui* pui = showTui( "panel_fuck" );

	const int ntag = 1000;
	CCMoveBy* action = CCMoveBy::actionWithDuration(0.3, ccp( 0, 10 ));
	CCActionInterval* back = action->reverse();
	CCActionInterval* pSequence = (CCActionInterval*)CCSequence::actions(action, back, NULL);
	CCRepeatForever* actionloop = CCRepeatForever::actionWithAction(pSequence);
	actionloop->setTag( ntag );
	pui->runAction( actionloop );

	Tui* pui_hello = (Tui*)pui->getControl( "hello" );
	if( pui_hello ){
		CCMoveBy* action = CCMoveBy::actionWithDuration(0.3, ccp( 10, 0 ));
		CCActionInterval* back = action->reverse();
		CCActionInterval* pSequence = (CCActionInterval*)CCSequence::actions(action, back, NULL);
		CCRepeatForever* actionloop = CCRepeatForever::actionWithAction(pSequence);
		actionloop->setTag( ntag );
		pui_hello->runAction( actionloop );
	}
}

void GameUIController::on_event_panel_result_click_help( void* o, TEvent* e )
{
	//	tLogDebug( "--> on event help" );
	hideTui( "panel_result" );
}

void GameUIController::on_event_panel_fuck_click_back( void* o, TEvent* e )
{
//	tLogDebug( "--> on event back" );
	Tui* pui = showTui( "panel_result" );
	tAssertcm( pui, return, "cant find panel_result" );
}

void GameUIController::on_event_panel_fuck_click_next( void* o, TEvent* e )
{
//	tLogDebug( "--> on event click" );
	hideAll(); //close, do not remove
	showTui( "panel_level" );
}

void GameUIController::on_event_fuck_result_click_help( void* o, TEvent* e )
{
	Tui* pui = getTui( "panel_fuck" );
	if( pui ){
		//sub control should yourself manipulate
		Tui* pfuck = (Tui*)pui->getControl( "fuck_result" );
		if( pfuck ){
			pfuck->setVisible( false );
		}
	}
}
